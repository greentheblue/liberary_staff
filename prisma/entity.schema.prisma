datasource db {
  provider = "mysql"
  url      = env("ENTITY_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "./generated/Entity"
}

model Entity {
  id            String        @id @default(uuid())
  name          String
  address       String
  type          String
  headPerson    HeadPerson?   @relation("EntityToHeadPerson")
  contactPerson ContactPerson? @relation("EntityToContactPerson")
  staff         Staff[]       @relation("EntityToStaff")
  bookCategories BookCategory[] @relation("EntityToBookCategory")
  books         Book[]        @relation("EntityToBook")
  issuedBooks   IssuedBook[]  @relation("EntityToIssuedBook")
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model HeadPerson {
  id        String   @id @default(uuid())
  name      String
  phone     String?
  address   String?
  entity    Entity   @relation("EntityToHeadPerson", fields: [entityId], references: [id])
  entityId  String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ContactPerson {
  id        String   @id @default(uuid())
  name      String
  phone     String
  address   String
  entity    Entity   @relation("EntityToContactPerson", fields: [entityId], references: [id])
  entityId  String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Staff {
  id        String   @id @default(uuid())
  name      String
  gender    String
  phone     String
  email     String
  address   String
  pasword   String?
  entity    Entity   @relation("EntityToStaff", fields: [entityId], references: [id])
  entityId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([entityId])
}

model Member {
  id          String       @id @default(cuid())
  name        String
  memberType  MemberType
  gender      Gender
  phoneNumber String
  address     String
  class       String?
  division    String?
  issuedBooks IssuedBook[] @relation("MemberToIssuedBook")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model BookCategory {
  id        String   @id @default(cuid())
  name      String
  entityId  String
  entity    Entity?  @relation("EntityToBookCategory", fields: [entityId], references: [id])
  books     Book[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([entityId])
}

model Book {
  id             String       @id @default(cuid())
  title          String
  author         String
  copies         Int
  availableCopies Int
  categoryId     String
  category       BookCategory @relation(fields: [categoryId], references: [id])
  entityId       String
  entity         Entity?      @relation("EntityToBook", fields: [entityId], references: [id])
  issuedBookItems IssuedBookItem[] 
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@index([categoryId])
  @@index([entityId])
}

model IssuedBook {
  id           String           @id @default(cuid())
  issueDate    DateTime         @default(now())
  memberId     String
  member       Member           @relation("MemberToIssuedBook", fields: [memberId], references: [id])
  entityId     String
  entity       Entity           @relation("EntityToIssuedBook", fields: [entityId], references: [id])
  items        IssuedBookItem[]
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  @@index([memberId])
  @@index([entityId])
}

model IssuedBookItem {
  id          String     @id @default(cuid())
  bookId      String
  book        Book       @relation(fields: [bookId], references: [id])
  issuedBookId String
  issuedBook  IssuedBook @relation(fields: [issuedBookId], references: [id], onDelete: Cascade)
  collected   Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([bookId])
  @@index([issuedBookId])
}

enum MemberType {
  STUDENT
  YOUTH
  ADULT
}

enum Gender {
  MALE
  FEMALE
  OTHER
}